
################# (위에 Type 작성)
# 1. Type (대분류)
#    - [FE]: 프론트엔드 관련 대분류
#    - [BE]: 백엔드 관련 대분류
#    - [INFRA]: 인프라 관련 대분류
#    - [MAIN]: 메인 관련 대분류
# [{Type}] {Subject Type} #{이슈 번호}: {Subject}
# ex) [FE] feat #21: 회원정보 수정 컴포넌트 추가
# ex) [BE] feat #22: 회원정보 수정 API 구현
# ex) [INFRA] deploy #23: 백엔드 Jenkinsfile 작성
# ex) [MAIN] docs #24: 포팅 매뉴얼 작성
################
# 1-1. Subject Type
#   - design:  UI에 변경사항이 있는 경우
#   - deploy: 배포와 관련된 커밋 
#   - docs: readme.md, json 파일 등 수정
#   - feat: 새로운 기능 구현
#   - fix: 오류 수정
#   - refactor: 코드 리팩토링
#   - setting: 개발 환경 구축과 관련된 커밋
#   - style: 코드에 변화가 없는 수정 ( 변수명, 오타, 세미콜론 등)
#   - test: 테스트코드 관련 커밋
# 1-2. Subject
#   - 50글자를 넘지 않도록 작성
#   - 마침표 및 특수기호는 사용하지 않습니다.
#   - 제목은 완전한 서술형 문장이 아니라, 간결하고 요점적인 서술을 위해 개조식 구문을 사용
################(아래는 공백 유지 : Type과 Body의 구분)

#################
# 1-2. Subject (제목)
#    - 50글자 넘지 않도록 작성
#    - 마침표 및 특수기호 사용 금지
#    - 제목은 완전한 서술형 문장이 아니라, 간결한 서술을 위해 개조식 구문 사용
#################

################# (위에 Body 작성)
# 2. Body (내용)
# 선택 사항으로 작업 내용이 복잡하거나 상세한 내용을 남겨야 하는 경우에만 작성
# ex) 
#    - 이미지 업로드 기능 추가
#    - 회원 정보 수정 api 연동
#################
# 2-1. Body 작성 규칙
#    - 본문은 72자 내로 작성
#    - 필요한 경우 여러줄로도 작성 가능
#    - 여러 줄의 메시지를 작성할 땐 "-"로 구분 
#    - 변경 내용보다 변경 이유를 작성 (나중에 봤을 때 코드 작성 이유를 파악하기 위해)
#################

################# (위에 Footer 작성)
# 3. Footer (꼬리말)
# 선택 사항으로 코드 작업과 관련된 이슈 번호 또는 참조 링크 등을 추가
# ex) ref #21: related to #23, #34
#################
# 3-1. Footer 작성 규칙
#    - 이슈 트래커 ID를 작성
#    - 여러 개의 이슈 번호를 적을 때는 쉼표로 구분
#################
# 3-2. Footer Type
#    - fix: 이슈 수정 중
#    - resolve: 이슈를 해결했을 때 사용
#    - ref: 참고할 이슈가 있을 때 사용
#################
# 최종 메세지 예시
# [FE] feat #21: 회원정보 수정 컴포넌트 추가
# (공백 필수)
#    - 이미지 업로드 기능 추가
#    - 회원 정보 수정 API 연동
# (공백 필수)
# ref #21: related to #23, #34
#################
# 참고사항
#    - Type, Body, Footer은 각각 공백 줄로 한칸씩 띄워 작성
#    - VS Code에서 커밋 시 글자가 밀리는 현상이 발생하는데 결과물에는 영향 X
#    - ^M은 인코딩문제로 발생하는 것이므로 무시해도 무방
#################
# 커밋 메시지 템플릿 적용방법
# 1. local에서 명령어 입력
# $  git config --local commit.template .gitmessage.txt
# 2. commit (vim 기준)
#    - "git add ."를 입력하고 엔터를 쳐서 변경사항이 있는 파일을 스테이지 영역에 추가
#    - "git commit"을 입력하고 엔터를 치면 위의 템플릿이 표시
#    - 키보드에서 "s"를 입력하여 모든 커밋 메세지를 입력한 뒤 "esc"
#    - ":wq"를 입력하고 엔터를 치면 커밋 완료
#################